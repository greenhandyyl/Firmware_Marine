// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "odom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace odom_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* odom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  odom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_odom_2eproto() {
  protobuf_AddDesc_odom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "odom.proto");
  GOOGLE_CHECK(file != NULL);
  odom_descriptor_ = file->message_type(0);
  static const int odom_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, vz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, variance_),
  };
  odom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      odom_descriptor_,
      odom::default_instance_,
      odom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(odom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(odom));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_odom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    odom_descriptor_, &odom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_odom_2eproto() {
  delete odom::default_instance_;
  delete odom_reflection_;
}

void protobuf_AddDesc_odom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nodom.proto\022\016odom_msgs.msgs\"\231\001\n\004odom\022\014\n"
    "\004usec\030\001 \002(\005\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\t\n\001z\030\004"
    " \002(\002\022\014\n\004roll\030\010 \002(\002\022\r\n\005pitch\030\t \002(\002\022\013\n\003yaw"
    "\030\n \002(\002\022\n\n\002vx\030\005 \001(\002\022\n\n\002vy\030\006 \001(\002\022\n\n\002vz\030\007 \001"
    "(\002\022\024\n\010variance\030\013 \003(\002B\002\020\001", 184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "odom.proto", &protobuf_RegisterTypes);
  odom::default_instance_ = new odom();
  odom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_odom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_odom_2eproto {
  StaticDescriptorInitializer_odom_2eproto() {
    protobuf_AddDesc_odom_2eproto();
  }
} static_descriptor_initializer_odom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int odom::kUsecFieldNumber;
const int odom::kXFieldNumber;
const int odom::kYFieldNumber;
const int odom::kZFieldNumber;
const int odom::kRollFieldNumber;
const int odom::kPitchFieldNumber;
const int odom::kYawFieldNumber;
const int odom::kVxFieldNumber;
const int odom::kVyFieldNumber;
const int odom::kVzFieldNumber;
const int odom::kVarianceFieldNumber;
#endif  // !_MSC_VER

odom::odom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom_msgs.msgs.odom)
}

void odom::InitAsDefaultInstance() {
}

odom::odom(const odom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:odom_msgs.msgs.odom)
}

void odom::SharedCtor() {
  _cached_size_ = 0;
  usec_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  vx_ = 0;
  vy_ = 0;
  vz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

odom::~odom() {
  // @@protoc_insertion_point(destructor:odom_msgs.msgs.odom)
  SharedDtor();
}

void odom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void odom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* odom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return odom_descriptor_;
}

const odom& odom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_odom_2eproto();
  return *default_instance_;
}

odom* odom::default_instance_ = NULL;

odom* odom::New() const {
  return new odom;
}

void odom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<odom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(usec_, vx_);
  }
  ZR_(vy_, vz_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  variance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool odom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom_msgs.msgs.odom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 usec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usec_)));
          set_has_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // required float z = 4;
      case 4: {
        if (tag == 37) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_vx;
        break;
      }

      // optional float vx = 5;
      case 5: {
        if (tag == 45) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_vy;
        break;
      }

      // optional float vy = 6;
      case 6: {
        if (tag == 53) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_vz;
        break;
      }

      // optional float vz = 7;
      case 7: {
        if (tag == 61) {
         parse_vz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vz_)));
          set_has_vz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_roll;
        break;
      }

      // required float roll = 8;
      case 8: {
        if (tag == 69) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_pitch;
        break;
      }

      // required float pitch = 9;
      case 9: {
        if (tag == 77) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_yaw;
        break;
      }

      // required float yaw = 10;
      case 10: {
        if (tag == 85) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_variance;
        break;
      }

      // repeated float variance = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_variance())));
        } else if (tag == 93) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90, input, this->mutable_variance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom_msgs.msgs.odom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom_msgs.msgs.odom)
  return false;
#undef DO_
}

void odom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom_msgs.msgs.odom)
  // required int32 usec = 1;
  if (has_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usec(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional float vx = 5;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vx(), output);
  }

  // optional float vy = 6;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vy(), output);
  }

  // optional float vz = 7;
  if (has_vz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vz(), output);
  }

  // required float roll = 8;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->roll(), output);
  }

  // required float pitch = 9;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pitch(), output);
  }

  // required float yaw = 10;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->yaw(), output);
  }

  // repeated float variance = 11 [packed = true];
  if (this->variance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_variance_cached_byte_size_);
  }
  for (int i = 0; i < this->variance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->variance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:odom_msgs.msgs.odom)
}

::google::protobuf::uint8* odom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:odom_msgs.msgs.odom)
  // required int32 usec = 1;
  if (has_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usec(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // optional float vx = 5;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vx(), target);
  }

  // optional float vy = 6;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vy(), target);
  }

  // optional float vz = 7;
  if (has_vz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vz(), target);
  }

  // required float roll = 8;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->roll(), target);
  }

  // required float pitch = 9;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pitch(), target);
  }

  // required float yaw = 10;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->yaw(), target);
  }

  // repeated float variance = 11 [packed = true];
  if (this->variance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _variance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->variance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->variance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom_msgs.msgs.odom)
  return target;
}

int odom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 usec = 1;
    if (has_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usec());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 4;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // required float roll = 8;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float pitch = 9;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float yaw = 10;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float vx = 5;
    if (has_vx()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float vy = 6;
    if (has_vy()) {
      total_size += 1 + 4;
    }

    // optional float vz = 7;
    if (has_vz()) {
      total_size += 1 + 4;
    }

  }
  // repeated float variance = 11 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->variance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _variance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void odom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const odom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const odom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void odom::MergeFrom(const odom& from) {
  GOOGLE_CHECK_NE(&from, this);
  variance_.MergeFrom(from.variance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usec()) {
      set_usec(from.usec());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_vz()) {
      set_vz(from.vz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void odom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void odom::CopyFrom(const odom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool odom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void odom::Swap(odom* other) {
  if (other != this) {
    std::swap(usec_, other->usec_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(vz_, other->vz_);
    variance_.Swap(&other->variance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata odom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = odom_descriptor_;
  metadata.reflection = odom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace odom_msgs

// @@protoc_insertion_point(global_scope)
