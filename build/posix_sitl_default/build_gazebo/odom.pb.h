// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odom.proto

#ifndef PROTOBUF_odom_2eproto__INCLUDED
#define PROTOBUF_odom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace odom_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_odom_2eproto();
void protobuf_AssignDesc_odom_2eproto();
void protobuf_ShutdownFile_odom_2eproto();

class odom;

// ===================================================================

class odom : public ::google::protobuf::Message {
 public:
  odom();
  virtual ~odom();

  odom(const odom& from);

  inline odom& operator=(const odom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const odom& default_instance();

  void Swap(odom* other);

  // implements Message ----------------------------------------------

  odom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const odom& from);
  void MergeFrom(const odom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 usec = 1;
  inline bool has_usec() const;
  inline void clear_usec();
  static const int kUsecFieldNumber = 1;
  inline ::google::protobuf::int32 usec() const;
  inline void set_usec(::google::protobuf::int32 value);

  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline float z() const;
  inline void set_z(float value);

  // required float roll = 8;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 8;
  inline float roll() const;
  inline void set_roll(float value);

  // required float pitch = 9;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 9;
  inline float pitch() const;
  inline void set_pitch(float value);

  // required float yaw = 10;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 10;
  inline float yaw() const;
  inline void set_yaw(float value);

  // optional float vx = 5;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 5;
  inline float vx() const;
  inline void set_vx(float value);

  // optional float vy = 6;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 6;
  inline float vy() const;
  inline void set_vy(float value);

  // optional float vz = 7;
  inline bool has_vz() const;
  inline void clear_vz();
  static const int kVzFieldNumber = 7;
  inline float vz() const;
  inline void set_vz(float value);

  // repeated float variance = 11 [packed = true];
  inline int variance_size() const;
  inline void clear_variance();
  static const int kVarianceFieldNumber = 11;
  inline float variance(int index) const;
  inline void set_variance(int index, float value);
  inline void add_variance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      variance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_variance();

  // @@protoc_insertion_point(class_scope:odom_msgs.msgs.odom)
 private:
  inline void set_has_usec();
  inline void clear_has_usec();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_vz();
  inline void clear_has_vz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 usec_;
  float x_;
  float y_;
  float z_;
  float roll_;
  float pitch_;
  float yaw_;
  float vx_;
  float vy_;
  float vz_;
  ::google::protobuf::RepeatedField< float > variance_;
  mutable int _variance_cached_byte_size_;
  friend void  protobuf_AddDesc_odom_2eproto();
  friend void protobuf_AssignDesc_odom_2eproto();
  friend void protobuf_ShutdownFile_odom_2eproto();

  void InitAsDefaultInstance();
  static odom* default_instance_;
};
// ===================================================================


// ===================================================================

// odom

// required int32 usec = 1;
inline bool odom::has_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void odom::set_has_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void odom::clear_has_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void odom::clear_usec() {
  usec_ = 0;
  clear_has_usec();
}
inline ::google::protobuf::int32 odom::usec() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.usec)
  return usec_;
}
inline void odom::set_usec(::google::protobuf::int32 value) {
  set_has_usec();
  usec_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.usec)
}

// required float x = 2;
inline bool odom::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void odom::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void odom::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void odom::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float odom::x() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.x)
  return x_;
}
inline void odom::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.x)
}

// required float y = 3;
inline bool odom::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void odom::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void odom::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void odom::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float odom::y() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.y)
  return y_;
}
inline void odom::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.y)
}

// required float z = 4;
inline bool odom::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void odom::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void odom::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void odom::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float odom::z() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.z)
  return z_;
}
inline void odom::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.z)
}

// required float roll = 8;
inline bool odom::has_roll() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void odom::set_has_roll() {
  _has_bits_[0] |= 0x00000010u;
}
inline void odom::clear_has_roll() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void odom::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float odom::roll() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.roll)
  return roll_;
}
inline void odom::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.roll)
}

// required float pitch = 9;
inline bool odom::has_pitch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void odom::set_has_pitch() {
  _has_bits_[0] |= 0x00000020u;
}
inline void odom::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void odom::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float odom::pitch() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.pitch)
  return pitch_;
}
inline void odom::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.pitch)
}

// required float yaw = 10;
inline bool odom::has_yaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void odom::set_has_yaw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void odom::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void odom::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float odom::yaw() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.yaw)
  return yaw_;
}
inline void odom::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.yaw)
}

// optional float vx = 5;
inline bool odom::has_vx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void odom::set_has_vx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void odom::clear_has_vx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void odom::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline float odom::vx() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.vx)
  return vx_;
}
inline void odom::set_vx(float value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.vx)
}

// optional float vy = 6;
inline bool odom::has_vy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void odom::set_has_vy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void odom::clear_has_vy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void odom::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline float odom::vy() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.vy)
  return vy_;
}
inline void odom::set_vy(float value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.vy)
}

// optional float vz = 7;
inline bool odom::has_vz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void odom::set_has_vz() {
  _has_bits_[0] |= 0x00000200u;
}
inline void odom::clear_has_vz() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void odom::clear_vz() {
  vz_ = 0;
  clear_has_vz();
}
inline float odom::vz() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.vz)
  return vz_;
}
inline void odom::set_vz(float value) {
  set_has_vz();
  vz_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.vz)
}

// repeated float variance = 11 [packed = true];
inline int odom::variance_size() const {
  return variance_.size();
}
inline void odom::clear_variance() {
  variance_.Clear();
}
inline float odom::variance(int index) const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.variance)
  return variance_.Get(index);
}
inline void odom::set_variance(int index, float value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.variance)
}
inline void odom::add_variance(float value) {
  variance_.Add(value);
  // @@protoc_insertion_point(field_add:odom_msgs.msgs.odom.variance)
}
inline const ::google::protobuf::RepeatedField< float >&
odom::variance() const {
  // @@protoc_insertion_point(field_list:odom_msgs.msgs.odom.variance)
  return variance_;
}
inline ::google::protobuf::RepeatedField< float >*
odom::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:odom_msgs.msgs.odom.variance)
  return &variance_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace odom_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_odom_2eproto__INCLUDED
